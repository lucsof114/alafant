{"version":3,"file":"optimist.esm.js","sources":["../src/tx/errors.ts","../src/tx/poll.ts","../src/tx/tx.ts","../src/utils/deserializeAccount.ts","../src/utils/deserializeMint.ts","../src/utils/wrapSOL.ts","../src/metadata/index.ts"],"sourcesContent":["import { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { TransactionResponse, VersionedTransactionResponse } from '@solana/web3.js';\n\ntype IntrusctionError = [index: number, errorMsg: string];\ntype CustomInstructionError = [index: number, code: { Custom: number }];\ninterface ITransactionError {\n  InstructionError: CustomInstructionError | IntrusctionError;\n}\n\ninterface IInsufficientFundsForRent {\n  InsufficientFundsForRent: {\n    account_index: number;\n  };\n}\n\nexport class TransactionError extends Error {\n  constructor(m: string, public txid?: string, public code?: number, public programIds?: string[]) {\n    super(m);\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Error.prototype);\n  }\n}\nexport const PROGRAM_FAILED_TO_COMPLETE_ERROR = 'Program failed to complete';\nexport const UNKNOWN_ERROR = 'Unknown error, visit the explorer';\nconst SYSTEM_PROGRAM_ID = '11111111111111111111111111111111';\n\nexport type ParseErrorParam = Pick<\n  NonNullable<Pick<VersionedTransactionResponse | TransactionResponse, 'meta'>['meta']>,\n  'err' | 'logMessages'\n>;\nexport function parseErrorForTransaction({ err, logMessages }: ParseErrorParam): {\n  message: string;\n  programIds?: string[];\n  code?: number;\n} {\n  const transactionError = err;\n  let errorCode;\n\n  if (transactionError && typeof transactionError !== 'string') {\n    let error = transactionError as ITransactionError | IInsufficientFundsForRent;\n\n    if ('InsufficientFundsForRent' in error) {\n      return {\n        message: 'Insufficient funds for rent',\n        code: 1,\n        programIds: [TOKEN_PROGRAM_ID.toBase58()],\n      };\n    } else {\n      const instructionError = (transactionError as ITransactionError).InstructionError;\n\n      const [index, errorMsg] = instructionError;\n\n      if (typeof errorMsg === 'string') {\n        if (errorMsg === 'ProgramFailedToComplete') {\n          if (logMessages) {\n            const failedProgramIds = getFailedExceededInstructionsPrograms(logMessages);\n            if (failedProgramIds.length > 0) {\n              return {\n                message: PROGRAM_FAILED_TO_COMPLETE_ERROR,\n                programIds: failedProgramIds,\n                code: errorCode,\n              };\n            }\n          }\n        }\n      } else {\n        errorCode = errorMsg.Custom ?? (instructionError[1] as any as number);\n        if (logMessages) {\n          const failedProgramId = getFailedProgram(logMessages, errorCode);\n          if (failedProgramId) {\n            if (failedProgramId === SYSTEM_PROGRAM_ID) {\n              return getSystemProgramError(instructionError as CustomInstructionError);\n            }\n\n            return {\n              message: UNKNOWN_ERROR,\n              programIds: [failedProgramId],\n              code: errorCode,\n            };\n          }\n        }\n      }\n    }\n  }\n\n  return { message: typeof transactionError === 'string' ? transactionError : UNKNOWN_ERROR, code: errorCode };\n}\n\nfunction getFailedExceededInstructionsPrograms(logMessages: String[]) {\n  let founds = [];\n  for (let i = 0; i < logMessages.length; i++) {\n    const log = logMessages[i];\n\n    const found = log.match(new RegExp(/Program (\\S+) failed: Program failed to complete/));\n\n    if (found) {\n      founds.push(found[1]);\n    }\n  }\n\n  return founds;\n}\n\nfunction getFailedProgram(logMessages: String[], errorCode: number | string) {\n  for (let i = 0; i < logMessages.length; i++) {\n    const log = logMessages[i];\n\n    const found = log.match(\n      new RegExp(`Program ([1-9A-HJ-NP-Za-km-z]{32,44}) failed: custom program error: 0x${errorCode.toString(16)}`),\n    );\n\n    if (found) {\n      return found[1];\n    }\n  }\n\n  return;\n}\n\nfunction getSystemProgramError(instructionError: CustomInstructionError) {\n  const code = instructionError[1].Custom;\n\n  let message = '';\n  switch (code) {\n    // https://github.com/solana-labs/solana/blob/22a18a68e3ee68ae013d647e62e12128433d7230/sdk/program/src/system_instruction.rs#L12-L26\n    // TODO: Do we need to translate all error codes.\n    case 0: {\n      message = 'An account with the same address already exists';\n      break;\n    }\n    case 1: {\n      message = 'The account does not have enough SOL to perform the operation';\n      break;\n    }\n    default: {\n      message = UNKNOWN_ERROR;\n    }\n  }\n\n  return {\n    code,\n    programIds: [SYSTEM_PROGRAM_ID],\n    message,\n  };\n}\n","import {\n  BlockhashWithExpiryBlockHeight,\n  Connection,\n  TransactionExpiredBlockheightExceededError,\n  VersionedTransactionResponse,\n} from '@solana/web3.js';\nimport promiseRetry from 'promise-retry';\n\ntype TransactionSenderAndConfirmationWaiterArgs = {\n  connection: Connection;\n  serializedTransaction: Buffer;\n  blockhashWithExpiryBlockHeight: BlockhashWithExpiryBlockHeight;\n};\n\nconst SEND_OPTIONS = {\n  skipPreflight: true,\n};\n\nexport async function transactionSenderAndConfirmationWaiter({\n  connection,\n  serializedTransaction,\n  blockhashWithExpiryBlockHeight,\n}: TransactionSenderAndConfirmationWaiterArgs): Promise<VersionedTransactionResponse | null> {\n  const txid = await connection.sendRawTransaction(serializedTransaction, SEND_OPTIONS);\n\n  try {\n    const lastValidBlockHeight = blockhashWithExpiryBlockHeight.lastValidBlockHeight - 150;\n    // this would throw TransactionExpiredBlockheightExceededError\n    await connection.confirmTransaction(\n      {\n        ...blockhashWithExpiryBlockHeight,\n        lastValidBlockHeight,\n        signature: txid,\n      },\n      'confirmed',\n    );\n  } catch (e) {\n    if (e instanceof TransactionExpiredBlockheightExceededError) {\n      // we consume this error and getTransaciton would return null\n    } else {\n      // invalid state from web3.js\n      throw e;\n    }\n  }\n\n  // in case rpc is not synced yet, we add some retries\n  const response = promiseRetry(\n    async (retry) => {\n      const response = await connection.getTransaction(txid, {\n        commitment: 'confirmed',\n        maxSupportedTransactionVersion: 0,\n      });\n      if (!response) {\n        retry(response);\n      }\n      return response;\n    },\n    {\n      retries: 5,\n      minTimeout: 500,\n    },\n  );\n\n  return response;\n}\n","import { type Idl, utils } from '@coral-xyz/anchor';\nimport {\n  Connection,\n  Blockhash,\n  Transaction,\n  VersionedTransaction,\n  PublicKey,\n  VersionedTransactionResponse,\n} from '@solana/web3.js';\nimport { transactionSenderAndConfirmationWaiter } from './poll';\nimport { ParseErrorParam, TransactionError, parseErrorForTransaction } from './errors';\n\ninterface IHandleSendTransactionOptions {\n  connection: Connection;\n  signedTransaction: VersionedTransaction | Transaction;\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n  skipPreflight?: boolean;\n  idl?: Idl;\n  idlProgramId?: PublicKey;\n}\n\nexport function getSignature(transaction: Transaction | VersionedTransaction): string {\n  const signature = 'signature' in transaction ? transaction.signature : transaction.signatures[0];\n  if (!signature) {\n    throw new Error('Missing transaction signature, the transaction was not signed by the fee payer');\n  }\n  return utils.bytes.bs58.encode(signature);\n}\n\ninterface IHandleSendTransactionError {\n  error: TransactionError;\n  transactionResponse?: VersionedTransactionResponse;\n  txid?: string;\n}\n\ninterface IHandleSendTransactionResponse {\n  transactionResponse: VersionedTransactionResponse;\n  txid: string;\n}\n\nexport const handleSendTransaction = async ({\n  connection,\n  signedTransaction,\n  blockhash,\n  lastValidBlockHeight,\n  idl,\n  skipPreflight,\n  idlProgramId,\n}: IHandleSendTransactionOptions): Promise<IHandleSendTransactionError | IHandleSendTransactionResponse> => {\n  let serializedTransaction: Buffer = Buffer.from(signedTransaction.serialize());\n\n  let signature = getSignature(signedTransaction);\n  if (!skipPreflight) {\n    const { value: transactionResponse } = await connection.simulateTransaction(\n      'message' in signedTransaction ? signedTransaction : new VersionedTransaction(signedTransaction.compileMessage()),\n      {\n        replaceRecentBlockhash: true,\n        commitment: 'processed',\n      },\n    );\n\n    const { err, logs } = transactionResponse;\n\n    if (err) {\n      const error = parseErrorWithIdl({ err, logMessages: logs }, signature, idl, idlProgramId);\n      return {\n        error,\n        txid: undefined,\n      };\n    }\n  }\n\n  let transactionResponse = await transactionSenderAndConfirmationWaiter({\n    connection,\n    serializedTransaction,\n    blockhashWithExpiryBlockHeight: {\n      blockhash,\n      lastValidBlockHeight,\n    },\n  });\n\n  if (!transactionResponse) {\n    const error = new TransactionError('Transaction is expired and was not confirmed. Please try again.');\n\n    return {\n      error,\n      txid: undefined,\n    };\n  }\n\n  if (transactionResponse.meta?.err) {\n    const error = parseErrorWithIdl(transactionResponse.meta, signature, idl, idlProgramId);\n\n    return {\n      error,\n      transactionResponse,\n      txid: signature,\n    };\n  }\n\n  return { transactionResponse, txid: signature };\n};\n\nexport const parseErrorWithIdl = (errorParams: ParseErrorParam, txid: string, idl?: Idl, idlProgramId?: PublicKey) => {\n  const { code, programIds, message } = parseErrorForTransaction(errorParams);\n\n  if (idlProgramId && idl) {\n    if (programIds?.includes(idlProgramId.toBase58())) {\n      let error = idl.errors?.find((error) => {\n        return error.code === code;\n      });\n\n      if (error) {\n        // msg might not be exposed by IDL, so we fallback to name\n        return new TransactionError(error.msg ?? error.name, txid, error.code, programIds);\n      }\n    }\n  }\n\n  return new TransactionError(message, txid, code, programIds);\n};\n","import { AccountInfo, AccountLayout, u64 } from '@solana/spl-token';\nimport { PublicKey } from '@solana/web3.js';\n\nexport const deserializeAccount = (data: Buffer | undefined): AccountInfo | undefined => {\n  if (data == undefined || data.length == 0) {\n    return undefined;\n  }\n\n  const accountInfo = AccountLayout.decode(data);\n  accountInfo.mint = new PublicKey(accountInfo.mint);\n  accountInfo.owner = new PublicKey(accountInfo.owner);\n  accountInfo.amount = u64.fromBuffer(accountInfo.amount);\n\n  if (accountInfo.delegateOption === 0) {\n    accountInfo.delegate = null;\n    accountInfo.delegatedAmount = new u64(0);\n  } else {\n    accountInfo.delegate = new PublicKey(accountInfo.delegate);\n    accountInfo.delegatedAmount = u64.fromBuffer(accountInfo.delegatedAmount);\n  }\n\n  accountInfo.isInitialized = accountInfo.state !== 0;\n  accountInfo.isFrozen = accountInfo.state === 2;\n\n  if (accountInfo.isNativeOption === 1) {\n    accountInfo.rentExemptReserve = u64.fromBuffer(accountInfo.isNative);\n    accountInfo.isNative = true;\n  } else {\n    accountInfo.rentExemptReserve = null;\n    accountInfo.isNative = false;\n  }\n\n  if (accountInfo.closeAuthorityOption === 0) {\n    accountInfo.closeAuthority = null;\n  } else {\n    accountInfo.closeAuthority = new PublicKey(accountInfo.closeAuthority);\n  }\n\n  return accountInfo;\n};\n","import { PublicKey } from '@solana/web3.js';\nimport { u64, MintInfo, MintLayout } from '@solana/spl-token';\n\n// Backward compatibility for new Mint.\nexport type Mint = MintInfo & {\n  address?: PublicKey;\n};\n\nexport const deserializeMint = (data: Buffer, address?: PublicKey) => {\n  if (data.length !== MintLayout.span) {\n    // This is causing problem with mainnet token\n    // throw new Error('Not a valid Mint')\n    return;\n  }\n\n  const mintInfo = MintLayout.decode(data);\n  mintInfo.address = address;\n\n  if (mintInfo.mintAuthorityOption === 0) {\n    mintInfo.mintAuthority = null;\n  } else {\n    mintInfo.mintAuthority = new PublicKey(mintInfo.mintAuthority);\n  }\n\n  mintInfo.supply = u64.fromBuffer(mintInfo.supply);\n  mintInfo.isInitialized = mintInfo.isInitialized !== 0;\n\n  if (mintInfo.freezeAuthorityOption === 0) {\n    mintInfo.freezeAuthority = null;\n  } else {\n    mintInfo.freezeAuthority = new PublicKey(mintInfo.freezeAuthority);\n  }\n\n  return mintInfo as Mint;\n};\n","import { ASSOCIATED_TOKEN_PROGRAM_ID, NATIVE_MINT, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport { Blockhash, Connection, PublicKey, SystemProgram, Transaction } from '@solana/web3.js';\n\nasync function getWSolATA(connection: Connection, publicKey: PublicKey) {\n  const wSolAddress = await Token.getAssociatedTokenAddress(\n    ASSOCIATED_TOKEN_PROGRAM_ID,\n    TOKEN_PROGRAM_ID,\n    NATIVE_MINT,\n    publicKey,\n    true,\n  );\n  const accountInfo = await connection.getAccountInfo(wSolAddress);\n  return { address: wSolAddress, accountInfo };\n}\n\ninterface CreateTxParams {\n  connection: Connection;\n  publicKey: PublicKey;\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}\n\nasync function createAndTransferWSOLTransaction({\n  connection,\n  publicKey,\n  blockhash,\n  lastValidBlockHeight,\n  amountToTransferInLamports,\n}: CreateTxParams & { amountToTransferInLamports: number }) {\n  const wSolAccount = await getWSolATA(connection, publicKey);\n  const instructions = [];\n\n  // If no accountInfo, create one\n  if (!wSolAccount.accountInfo) {\n    // Create ATA account\n    instructions.push(\n      Token.createAssociatedTokenAccountInstruction(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        NATIVE_MINT,\n        wSolAccount.address,\n        publicKey,\n        publicKey,\n      ),\n    );\n  }\n\n  // Fund account and sync\n  instructions.push(\n    SystemProgram.transfer({\n      fromPubkey: publicKey,\n      toPubkey: wSolAccount.address,\n      lamports: amountToTransferInLamports,\n    }),\n  );\n  instructions.push(\n    // This is not exposed by the types, but indeed it exists\n    (Token as any).createSyncNativeInstruction(TOKEN_PROGRAM_ID, wSolAccount.address),\n  );\n\n  const transaction = new Transaction({ feePayer: publicKey, blockhash, lastValidBlockHeight });\n  transaction.add(...instructions);\n  return transaction;\n}\n\nasync function createUnwrapSolTransaction({ connection, publicKey, blockhash, lastValidBlockHeight }: CreateTxParams) {\n  const wSolAccount = await getWSolATA(connection, publicKey);\n  const instructions = [];\n\n  if (!wSolAccount.accountInfo) {\n    return;\n  }\n  // Close account\n  instructions.push(\n    Token.createCloseAccountInstruction(TOKEN_PROGRAM_ID, wSolAccount.address, publicKey, publicKey, []),\n  );\n\n  const transaction = new Transaction({ feePayer: publicKey, blockhash, lastValidBlockHeight });\n  transaction.add(...instructions);\n  return transaction;\n}\n\nexport { createAndTransferWSOLTransaction, createUnwrapSolTransaction };\n","import { Metadata } from '@metaplex-foundation/mpl-token-metadata';\nimport { utils } from '@coral-xyz/anchor';\nimport { MintLayout, MintInfo, TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { Connection, PublicKey } from '@solana/web3.js';\n\nconst TOKEN_METADATA_PROGRAM_ID = new PublicKey('metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');\n\n// This is not an official program but a community deployement\nconst TOKEN_2022_METADATA_PROGRAM_ID = new PublicKey('META4s4fSmpkTbZoUsgC1oBnWB31vQcmnN8giPw51Zu');\n\nexport function findMetadataAddress(mint: PublicKey, tokenProgramId: PublicKey): PublicKey {\n  const metadataProgramId = tokenProgramId.equals(TOKEN_PROGRAM_ID)\n    ? TOKEN_METADATA_PROGRAM_ID\n    : TOKEN_2022_METADATA_PROGRAM_ID;\n\n  return PublicKey.findProgramAddressSync(\n    [Buffer.from('metadata'), metadataProgramId.toBuffer(), mint.toBuffer()],\n    metadataProgramId,\n  )[0];\n}\n\ntype TokenMetadata = {\n  publicKey: PublicKey;\n  account: Metadata;\n};\n\ntype TokenMintWithProgramId = {\n  mint: PublicKey;\n  programId: PublicKey;\n};\n\ninterface RawMintWithProgramId extends MintInfo {\n  programId: PublicKey;\n}\n\nexport async function fetchMintInfos(\n  connection: Connection,\n  mints: PublicKey[],\n): Promise<Array<[string, RawMintWithProgramId]>> {\n  const results = (await utils.rpc.getMultipleAccounts(connection, mints)).reduce((acc, m, idx) => {\n    if (m) {\n      acc.push([\n        mints[idx].toString(),\n        {\n          ...MintLayout.decode(m.account.data),\n          programId: m.account.owner,\n        },\n      ]);\n    }\n    return acc;\n  }, new Array<[string, RawMintWithProgramId]>());\n\n  return results;\n}\n\nexport const removeEmptyChars = (value: string) => value.replace(/\\u0000/g, '');\n\nexport async function fetchTokenMetadatas(\n  connection: Connection,\n  tokens: TokenMintWithProgramId[],\n): Promise<TokenMetadata[]> {\n  const metadataAddresses = tokens.map((t) => findMetadataAddress(t.mint, t.programId));\n\n  const tokenMetaAccounts = (await utils.rpc.getMultipleAccounts(connection, metadataAddresses)).reduce(\n    (acc, keyedAccount) => {\n      if (keyedAccount) {\n        const metadata = Metadata.deserialize(keyedAccount.account.data)[0];\n        metadata.data.name = removeEmptyChars(metadata.data.name);\n        metadata.data.symbol = removeEmptyChars(metadata.data.symbol);\n        metadata.data.uri = removeEmptyChars(metadata.data.uri);\n\n        acc.push({\n          publicKey: keyedAccount.publicKey,\n          account: metadata,\n        });\n      }\n      return acc;\n    },\n    new Array<TokenMetadata>(),\n  );\n\n  return tokenMetaAccounts;\n}\n"],"names":["TransactionError","Error","constructor","m","txid","code","programIds","Object","setPrototypeOf","prototype","PROGRAM_FAILED_TO_COMPLETE_ERROR","UNKNOWN_ERROR","SYSTEM_PROGRAM_ID","parseErrorForTransaction","err","logMessages","transactionError","errorCode","error","message","TOKEN_PROGRAM_ID","toBase58","instructionError","InstructionError","index","errorMsg","failedProgramIds","getFailedExceededInstructionsPrograms","length","_errorMsg$Custom","Custom","failedProgramId","getFailedProgram","getSystemProgramError","founds","i","log","found","match","RegExp","push","toString","SEND_OPTIONS","skipPreflight","transactionSenderAndConfirmationWaiter","connection","serializedTransaction","blockhashWithExpiryBlockHeight","sendRawTransaction","lastValidBlockHeight","confirmTransaction","signature","e","TransactionExpiredBlockheightExceededError","response","promiseRetry","retry","getTransaction","commitment","maxSupportedTransactionVersion","retries","minTimeout","getSignature","transaction","signatures","utils","bytes","bs58","encode","handleSendTransaction","signedTransaction","blockhash","idl","idlProgramId","_transactionResponse$","Buffer","from","serialize","value","transactionResponse","simulateTransaction","VersionedTransaction","compileMessage","replaceRecentBlockhash","logs","parseErrorWithIdl","undefined","meta","errorParams","includes","_idl$errors","errors","find","_error$msg","msg","name","deserializeAccount","data","accountInfo","AccountLayout","decode","mint","PublicKey","owner","amount","u64","fromBuffer","delegateOption","delegate","delegatedAmount","isInitialized","state","isFrozen","isNativeOption","rentExemptReserve","isNative","closeAuthorityOption","closeAuthority","deserializeMint","address","MintLayout","span","mintInfo","mintAuthorityOption","mintAuthority","supply","freezeAuthorityOption","freezeAuthority","getWSolATA","publicKey","wSolAddress","Token","getAssociatedTokenAddress","ASSOCIATED_TOKEN_PROGRAM_ID","NATIVE_MINT","getAccountInfo","createAndTransferWSOLTransaction","amountToTransferInLamports","wSolAccount","instructions","createAssociatedTokenAccountInstruction","SystemProgram","transfer","fromPubkey","toPubkey","lamports","createSyncNativeInstruction","Transaction","feePayer","add","createUnwrapSolTransaction","createCloseAccountInstruction","TOKEN_METADATA_PROGRAM_ID","TOKEN_2022_METADATA_PROGRAM_ID","findMetadataAddress","tokenProgramId","metadataProgramId","equals","findProgramAddressSync","toBuffer","fetchMintInfos","mints","results","rpc","getMultipleAccounts","reduce","acc","idx","account","programId","Array","removeEmptyChars","replace","fetchTokenMetadatas","tokens","metadataAddresses","map","t","tokenMetaAccounts","keyedAccount","metadata","Metadata","deserialize","symbol","uri"],"mappings":"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"}