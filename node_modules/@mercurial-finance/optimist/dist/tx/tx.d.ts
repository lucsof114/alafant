import { type Idl } from '@coral-xyz/anchor';
import { Connection, Blockhash, Transaction, VersionedTransaction, PublicKey, VersionedTransactionResponse } from '@solana/web3.js';
import { ParseErrorParam, TransactionError } from './errors';
interface IHandleSendTransactionOptions {
    connection: Connection;
    signedTransaction: VersionedTransaction | Transaction;
    blockhash: Blockhash;
    lastValidBlockHeight: number;
    skipPreflight?: boolean;
    idl?: Idl;
    idlProgramId?: PublicKey;
}
export declare function getSignature(transaction: Transaction | VersionedTransaction): string;
interface IHandleSendTransactionError {
    error: TransactionError;
    transactionResponse?: VersionedTransactionResponse;
    txid?: string;
}
interface IHandleSendTransactionResponse {
    transactionResponse: VersionedTransactionResponse;
    txid: string;
}
export declare const handleSendTransaction: ({ connection, signedTransaction, blockhash, lastValidBlockHeight, idl, skipPreflight, idlProgramId, }: IHandleSendTransactionOptions) => Promise<IHandleSendTransactionError | IHandleSendTransactionResponse>;
export declare const parseErrorWithIdl: (errorParams: ParseErrorParam, txid: string, idl?: Idl, idlProgramId?: PublicKey) => TransactionError;
export {};
